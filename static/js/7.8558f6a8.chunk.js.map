{"version":3,"sources":["services/weather-item.js","utils/http-client.js","store/actions/weather-item.js","components/loading/index.jsx"],"names":["groupBy","require","getWeatherItems","a","Promise","resolve","reject","url","params","baseApiUrl","q","APPID","cnt","axios","method","then","response","groupedList","data","list","x","dayjs","dt","format","weatherItems","Object","keys","map","formattedDate","weatherList","averageTemp","reduce","b","main","temp","length","key","date","segments","time","temperature","catch","fetchWeatherItems","dispatch","setIsLoadingWeatherItems","setWeatherItems","isLoading","type","payload","Loading","isLoadingWeatherItems","history","useHistory","useEffect","push","pageurl","WEATHERINFO","className","connect","state","bindActionCreators"],"mappings":"0QAGMA,EAAUC,EAAQ,KAEXC,EAAe,uCAAG,sBAAAC,EAAA,+EAC7B,IAAIC,SAAQ,SAACC,EAASC,GCJL,IAACC,EAAKC,GAALD,EDKZE,ICLiBD,EDKL,CACZE,EAAG,YACHC,MAAO,mCACPC,IAAK,ICPFC,IAAM,CACTC,OAAQ,MACRP,MACAC,YDKDO,MAAK,SAAAC,GACN,IAAMC,EAAcjB,EAAQgB,EAASE,KAAKC,MAAM,SAAAC,GAAC,OAAIC,IAAa,IAAPD,EAAEE,IAAWC,OAAO,kBAEzEC,EAAeC,OAAOC,KAAKT,GAAaU,KAAI,SAAAC,GAChD,IAAMC,EAAcZ,EAAYW,GAM1BE,EAJiBD,EAAYE,QAAO,SAAC5B,EAAG6B,GAC5C,OAAO7B,EAAI6B,EAAEC,KAAKC,OACjB,GAEkCL,EAAYM,OAEjD,MAAO,CACLC,IAAKR,EACLS,KAAMhB,IAA0B,IAApBQ,EAAY,GAAGP,IAAWC,OAAO,aAC7CO,cACAQ,SAAUT,EAAYF,KAAI,SAAAP,GAAC,MAAK,CAC9BmB,KAAMlB,IAAa,IAAPD,EAAEE,IAAWC,OAAO,WAChCiB,YAAapB,EAAEa,KAAKC,aAK1B7B,EAAQmB,MAERiB,MAAMnC,OA/BmB,2CAAH,qDEHfoC,EAAoB,yDAAM,WAAOC,GAAP,eAAAxC,EAAA,6DACnCwC,EAASC,GAAyB,IADC,SAGR1C,IAHQ,OAG7BsB,EAH6B,OAInCmB,EAASE,EAAgBrB,IAEzBmB,EAASC,GAAyB,IANC,2CAAN,uDAS3BA,EAA2B,SAAAE,GAAS,MAAK,CAC3CC,KAAM,+BACNC,QAASF,IAGPD,EAAkB,SAAArB,GAAY,MAAK,CACrCuB,KAAM,oBACNC,QAASxB,I,OCXAyB,EAAU,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,sBAAuBR,EAAwB,EAAxBA,kBACvCS,EAAUC,cAYhB,OAVAC,qBAAU,WACNX,MACD,CAACA,IAEJW,qBAAU,YACwB,IAA1BH,GACAC,EAAQG,KAAKC,IAAQC,eAE1B,CAACN,EAAuBC,IAGvB,qBAAKM,UAAU,eAAf,SACI,+CAkBGC,uBAbS,SAACC,GAAD,MAAY,CAChCT,sBAAuBS,EAAMT,0BAGN,SAACP,GAAD,OACvBiB,YACI,CACIlB,qBAEJC,KAIOe,CAA6CT","file":"static/js/7.8558f6a8.chunk.js","sourcesContent":["import { get } from \"../utils/http-client\";\nimport { baseApiUrl } from '../utils/constants';\nimport dayjs from \"dayjs\";\nconst groupBy = require('lodash/groupBy')\n\nexport const getWeatherItems = async () => (\n  new Promise((resolve, reject) => {\n    get(baseApiUrl, {\n        q: 'Munich,de',\n        APPID: '75f972b80e26f14fe6c920aa6a85ad57',\n        cnt: 40\n    }).then(response => {\n      const groupedList = groupBy(response.data.list, x => dayjs(x.dt * 1000).format('DD-MMM-YYYY'));\n\n      const weatherItems = Object.keys(groupedList).map(formattedDate => {\n        const weatherList = groupedList[formattedDate];\n  \n        const temperatureSum = weatherList.reduce((a, b) => {\n          return a + b.main.temp;\n        }, 0);\n  \n        const averageTemp = temperatureSum / weatherList.length;\n  \n        return {\n          key: formattedDate,\n          date: dayjs(weatherList[0].dt * 1000).format('DD MMM YY'),\n          averageTemp,\n          segments: weatherList.map(x => ({\n            time: dayjs(x.dt * 1000).format('hh:mm A'),\n            temperature: x.main.temp\n          }))\n        };\n      });\n  \n      resolve(weatherItems);\n    }\n    ).catch(reject)\n  })\n);","import axios from 'axios';\n\nexport const get = (url, params) => {\n    return axios({\n        method: 'get',\n        url,\n        params\n    });\n};\n","import { getWeatherItems } from '../../services/weather-item';\n\nexport const fetchWeatherItems = () => async (dispatch) => {\n    dispatch(setIsLoadingWeatherItems(true));\n\n    const weatherItems = await getWeatherItems();\n    dispatch(setWeatherItems(weatherItems));\n\n    dispatch(setIsLoadingWeatherItems(false));\n};\n\nconst setIsLoadingWeatherItems = isLoading => ({\n    type: 'SET_IS_LOADING_WEATHER_ITEMS',\n    payload: isLoading\n});\n\nconst setWeatherItems = weatherItems => ({\n    type: 'SET_WEATHER_ITEMS',\n    payload: weatherItems\n});","import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { pageurl } from '../../utils/constants';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { fetchWeatherItems } from '../../store/actions/weather-item';\n\nexport const Loading = ({ isLoadingWeatherItems, fetchWeatherItems }) => {\n    const history = useHistory();\n\n    useEffect(() => {\n        fetchWeatherItems();\n    }, [fetchWeatherItems]);\n\n    useEffect(() => {\n        if (isLoadingWeatherItems === false) {\n            history.push(pageurl.WEATHERINFO);\n        }\n    }, [isLoadingWeatherItems, history]);\n\n    return (\n        <div className='loading-page'>\n            <h2>Loading...</h2>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    isLoadingWeatherItems: state.isLoadingWeatherItems\n});\n\nconst mapDispatchToProps = (dispatch) => (\n    bindActionCreators(\n        {\n            fetchWeatherItems\n        },\n        dispatch\n    )\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Loading);\n"],"sourceRoot":""}