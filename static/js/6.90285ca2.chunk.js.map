{"version":3,"sources":["selectors/index.js","components/weather-info/index.jsx"],"names":["selectWeatherItems","state","weatherItems","WeatherInfo","TemperatureTypeEnum","CELSIUS","FAHRENHEIT","Object","freeze","useState","pageNum","setPageNum","temperatureType","setTemperatureType","selectedWeatherCardKey","setSelectedWeatherCardKey","getWeatherItemsByPage","slice","memoizedGetWeatherItemsByPage","useCallback","useEffect","key","getTemperature","temperature","handleChangePageNum","direction","htmlWidth","document","getElementsByTagName","offsetWidth","cardsWrapper","getElementById","scrollLeft","BlueRadio","withStyles","root","color","blue","checked","props","Radio","WeatherCard","date","averageTemp","isSelected","isInView","onClick","Card","variant","className","data-testid","CardContent","Typography","toFixed","selectedWeatherCard","find","x","weatherCardSegments","segments","map","label","temp","segment","time","CustomTooltip","active","payload","length","dataKey","itemsInView","isDesktop","window","innerWidth","href","RadioGroup","row","aria-label","name","value","onChange","e","target","FormControlLabel","control","style","id","item","some","ResponsiveContainer","width","height","BarChart","data","XAxis","Tooltip","content","Bar","fill","connect"],"mappings":"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","file":"static/js/6.90285ca2.chunk.js","sourcesContent":["export const selectWeatherItems = (state) => state.weatherItems;","import React, { useState, useEffect, useCallback } from 'react';\nimport { blue } from '@material-ui/core/colors';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport ArrowRightAltIcon from '@material-ui/icons/ArrowRightAlt';\nimport { selectWeatherItems } from '../../selectors';\nimport { connect } from 'react-redux';\nimport { ResponsiveContainer, BarChart, Bar, XAxis, Tooltip } from 'recharts';\nimport './index.scss';\n\nexport const WeatherInfo = ({ weatherItems }) => {\n    const TemperatureTypeEnum = {\n        CELSIUS: '1',\n        FAHRENHEIT: '2'\n    };\n    Object.freeze(TemperatureTypeEnum);\n    const pageSize = 3;\n\n    const [pageNum, setPageNum] = useState(1);\n    const [temperatureType, setTemperatureType] = useState(TemperatureTypeEnum.FAHRENHEIT);\n    const [selectedWeatherCardKey, setSelectedWeatherCardKey] = useState();\n\n    const getWeatherItemsByPage = () => weatherItems.slice(pageSize * (pageNum - 1), pageSize * pageNum);\n\n    const memoizedGetWeatherItemsByPage = useCallback(getWeatherItemsByPage, [weatherItems, pageNum]);\n\n    useEffect(() => {\n        setSelectedWeatherCardKey(memoizedGetWeatherItemsByPage()[0]?.key);\n    }, [memoizedGetWeatherItemsByPage]);\n\n    const getTemperature = temperature => {\n        const getCelsiusTemp = fahrenheitTemp => (fahrenheitTemp - 32) * (5 / 9);\n\n        if (temperatureType === TemperatureTypeEnum.CELSIUS) {\n            return getCelsiusTemp(temperature);\n        }\n        return temperature;\n    }\n\n    const handleChangePageNum = (direction) => {\n        const htmlWidth = document.getElementsByTagName('html')[0].offsetWidth;\n        const cardsWrapper = document.getElementById('cards-wrapper');\n\n        if (direction === 'right') {\n            setPageNum(pageNum + 1);\n            cardsWrapper.scrollLeft += htmlWidth;\n        } else {\n            setPageNum(pageNum - 1);\n            cardsWrapper.scrollLeft -= htmlWidth;\n        }\n    };\n\n    const handleChangeTemperatureType = (e) => {\n        setTemperatureType(e.target.value);\n    };\n\n    const renderTemperature = temperature => {\n        if (temperatureType === TemperatureTypeEnum.CELSIUS) {\n            return <span>{getTemperature(temperature).toFixed(2)}&#176;C</span>;\n        }\n        return <span>{getTemperature(temperature).toFixed(2)}&#176;F</span>;\n    };\n\n    const BlueRadio = withStyles({\n        root: {\n            color: blue[400],\n            '&$checked': {\n                color: blue[600],\n            },\n        },\n        checked: {},\n    })((props) => <Radio color=\"default\" {...props} />);\n\n    const WeatherCard = ({ date, averageTemp, isSelected, isInView, onClick }) => {\n        return (\n            <Card\n                variant='outlined'\n                className={`weather-card${isSelected ? ' selected' : ''}`}\n                data-testid={`${isInView ? 'visible-card' : 'hidden-card'}`}\n                onClick={onClick}>\n                <CardContent>\n                    <Typography variant=\"body1\">Temp:</Typography>\n                    <Typography variant=\"body2\" color=\"textSecondary\" className='temp-value-text'>{renderTemperature(averageTemp)}</Typography>\n                    <Typography variant=\"body1\">Date:</Typography>\n                    <Typography variant=\"body2\" color=\"textSecondary\">{date}</Typography>\n                </CardContent>\n            </Card>\n        );\n    };\n\n    const selectedWeatherCard = getWeatherItemsByPage().find(x => x.key === selectedWeatherCardKey);\n    const weatherCardSegments = selectedWeatherCard?.segments?.map(x => ({\n        label: `${getTemperature(x.temperature).toFixed(2)}${temperatureType === TemperatureTypeEnum.FAHRENHEIT ? 'F' : 'C'}`,\n        temp: getTemperature(x.temperature),\n        segment: x.time\n    }));\n\n    const CustomTooltip = ({ active, payload, label }) => {\n        if (active && payload && payload.length) {\n            return (\n                <div className=\"custom-tooltip\">\n                    <div className=\"title\">{payload[0].payload.segment}</div>\n                    <div className=\"subtitle\">{`${payload[0].dataKey} : ${label}`}</div>\n                </div>\n            );\n        }\n\n        return null;\n    };\n\n    const itemsInView = getWeatherItemsByPage();\n    const isDesktop = window.innerWidth >= 1024;\n\n    return (\n        <div className='weather-info-page'>\n            <h3 className='home-heading'>\n                <a href='/weather-appp'>Back To Home (Reload Data)</a>\n            </h3>\n            <div className='radio-group-wrapper'>\n                <RadioGroup\n                    row\n                    aria-label=\"temperature\"\n                    name=\"temperature\"\n                    value={temperatureType}\n                    onChange={handleChangeTemperatureType}\n                >\n                    <FormControlLabel\n                        value={TemperatureTypeEnum.CELSIUS}\n                        control={<BlueRadio />}\n                        label=\"Celsius\"\n                        className='radio-label' />\n                    <FormControlLabel\n                        value={TemperatureTypeEnum.FAHRENHEIT}\n                        control={<BlueRadio />}\n                        label=\"Fahrenheit\"\n                        className='radio-label' />\n                </RadioGroup>\n            </div>\n            <div className='arrows-wrapper'>\n                <ArrowRightAltIcon\n                    style={{ color: blue[500] }}\n                    className={`arrow${pageNum > 1 ? ' visible' : ''}`}\n                    onClick={() => handleChangePageNum('left')}\n                />\n                <ArrowRightAltIcon\n                    style={{ color: blue[500] }}\n                    className={`arrow${pageNum < (weatherItems.length / pageSize) ? ' visible' : ''}`}\n                    data-testid=\"next-icon\"\n                    onClick={() => handleChangePageNum('right')}\n                />\n            </div>\n            <div>\n                <div>\n                    <div id=\"cards-wrapper\" data-testid=\"cards-wrapper\">\n                        {weatherItems.map((item) => (\n                            <WeatherCard\n                                {...item}\n                                isInView={itemsInView.some(x => x.key === item.key)}\n                                isSelected={selectedWeatherCardKey === item.key}\n                                onClick={() => setSelectedWeatherCardKey(item.key)}\n                            />\n                        ))}\n                    </div>\n                </div>\n            </div>\n            <div className='bar-chart-wrapper'>\n                <ResponsiveContainer width={isDesktop ? '70%' : '100%'} height={250}>\n                    <BarChart width='100%' height='100%' data={weatherCardSegments}>\n                        <XAxis dataKey=\"label\" />\n                        <Tooltip content={<CustomTooltip />} />\n                        <Bar dataKey=\"temp\" fill=\"#2196f3\" />\n                    </BarChart>\n                </ResponsiveContainer>\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    weatherItems: selectWeatherItems(state)\n});\n\nexport default connect(mapStateToProps, {})(WeatherInfo);\n"],"sourceRoot":""}