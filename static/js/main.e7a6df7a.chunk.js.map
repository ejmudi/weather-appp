{"version":3,"sources":["utils/constants.js","store/reducers/index.js","store/reducers/weather-item.js","store/index.js","reportWebVitals.js","index.jsx"],"names":["baseApiUrl","pageurl","LOADING","WEATHERINFO","rootReducer","combineReducers","weatherItems","state","action","type","payload","isLoadingWeatherItems","middleware","thunk","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","store","createStore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Loading","lazy","WeatherInfo","Routes","fallback","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"mHAAA,oEAAO,IAAMA,EAAa,kDAEbC,EAAU,CACnBC,QAAS,gBACTC,YAAa,kB,yGCIFC,EALKC,YAAgB,CAChCC,aCKwB,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCAChD,OAAQA,EAAOC,MACX,IAAK,oBACD,OAAOD,EAAOE,QAClB,QACI,OAAOH,IDTfI,sBCLiC,WAA2B,IAA1BJ,EAAyB,uDAAjB,KAAMC,EAAW,uCAC3D,OAAQA,EAAOC,MACX,IAAK,+BACD,OAAOD,EAAOE,QAClB,QACI,OAAOH,MCDbK,EAAa,C,MAACC,GAGdC,GADmBC,OAAOC,sCAAwCC,KACtCC,IAAe,WAAf,EAAmBN,IAItCO,EAFDC,YAAYhB,EAAaU,GCGxBO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCCRQ,EAAUC,gBAAK,kBAAM,8DACrBC,EAAcD,gBAAK,kBAAM,8DAEzBE,EAAS,kBACX,cAAC,IAAD,UACI,cAAC,IAAD,UACI,eAAC,WAAD,CAAUC,SAAU,6CAApB,UACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAMnC,IAAQC,QAASmC,UAAWP,IAC/C,cAAC,IAAD,CAAOM,KAAMnC,IAAQE,YAAakC,UAAWL,YAM7DM,IAASC,OACL,cAAC,IAAD,CAAUpB,MAAOA,EAAjB,SACI,cAAC,EAAD,MAEJqB,SAASC,eAAe,SAM5BpB,M","file":"static/js/main.e7a6df7a.chunk.js","sourcesContent":["export const baseApiUrl = 'http://api.openweathermap.org/data/2.5/forecast'\n\nexport const pageurl = {\n    LOADING: '/weather-appp',\n    WEATHERINFO: '/weather-info',\n};","import { combineReducers } from 'redux';\nimport { isLoadingWeatherItems, weatherItems } from './weather-item';\n\nconst rootReducer = combineReducers({\n    weatherItems,\n    isLoadingWeatherItems\n});\n\nexport default rootReducer;","export const isLoadingWeatherItems = (state = null, action) => {\n    switch (action.type) {\n        case 'SET_IS_LOADING_WEATHER_ITEMS':\n            return action.payload;\n        default:\n            return state;\n    }\n};\n\nexport const weatherItems = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_WEATHER_ITEMS':\n            return action.payload;\n        default:\n            return state;\n    }\n};\n","import { applyMiddleware, createStore, compose } from \"redux\";\nimport rootReducer from \"./reducers\";\nimport thunk from \"redux-thunk\";\n\nconst middleware = [thunk];\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst enhancer = composeEnhancers(applyMiddleware(...middleware));\n\nconst store = createStore(rootReducer, enhancer);\n\nexport default store;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { lazy, Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, Switch, BrowserRouter as Router } from 'react-router-dom';\nimport { pageurl } from './utils/constants';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport reportWebVitals from './reportWebVitals';\n\nconst Loading = lazy(() => import('./components/loading'));\nconst WeatherInfo = lazy(() => import('./components/weather-info'));\n\nconst Routes = () => (\n    <Router>\n        <Switch>\n            <Suspense fallback={<div>Loading...</div>}>\n                <Route exact path={pageurl.LOADING} component={Loading} />\n                <Route path={pageurl.WEATHERINFO} component={WeatherInfo} />\n            </Suspense>\n        </Switch>\n    </Router>\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <Routes />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}