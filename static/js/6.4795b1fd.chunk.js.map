{"version":3,"sources":["selectors/index.js","components/weather-info/index.jsx"],"names":["selectWeatherItems","state","weatherItems","useStyles","makeStyles","theme","root","minWidth","flexGrow","bullet","display","margin","transform","title","fontSize","pos","marginBottom","paper","padding","spacing","textAlign","color","palette","text","primary","radioColor","blue","selectedCard","backgroundColor","WeatherInfo","getWeatherItemsByPage","slice","pageSize","pageNum","TemperatureTypeEnum","CELSIUS","FAHRENHEIT","Object","freeze","classes","useState","setPageNum","temperatureType","setTemperatureType","selectedWeatherCardKey","setSelectedWeatherCardKey","useEffect","key","getTemperature","temperature","handleChangePageNum","direction","htmlWidth","document","getElementsByTagName","offsetWidth","cardsWrapper","getElementById","scrollLeft","BlueRadio","withStyles","checked","props","Radio","WeatherCard","date","averageTemp","isSelected","isInView","onClick","className","data-testid","Card","variant","CardContent","Typography","toFixed","selectedWeatherCard","find","x","weatherCardSegments","segments","map","label","temp","segment","time","CustomTooltip","active","payload","length","dataKey","itemsInView","RadioGroup","row","aria-label","name","value","onChange","e","target","FormControlLabel","control","style","id","item","some","BarChart","width","height","data","XAxis","Tooltip","content","Bar","fill","connect"],"mappings":"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","file":"static/js/6.4795b1fd.chunk.js","sourcesContent":["export const selectWeatherItems = (state) => state.weatherItems;","import React, { useState, useEffect } from 'react';\nimport { blue } from '@material-ui/core/colors';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport ArrowRightAltIcon from '@material-ui/icons/ArrowRightAlt';\nimport { selectWeatherItems } from '../../selectors';\nimport { connect } from 'react-redux';\nimport { BarChart, Bar, XAxis, Tooltip } from 'recharts';\nimport './index.scss';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        minWidth: 275,\n        flexGrow: 1\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    paper: {\n        padding: theme.spacing(4),\n        textAlign: 'center',\n        color: theme.palette.text.primary,\n    },\n    radioColor: {\n        color: blue[400],\n        '&$checked': {\n            color: blue[600],\n        },\n    },\n    selectedCard: {\n        backgroundColor: 'red'\n    }\n}));\n\nexport const WeatherInfo = ({ weatherItems }) => {\n    const getWeatherItemsByPage = () => weatherItems.slice(pageSize * (pageNum - 1), pageSize * pageNum);\n\n    const TemperatureTypeEnum = {\n        CELSIUS: '1',\n        FAHRENHEIT: '2'\n    };\n    Object.freeze(TemperatureTypeEnum);\n    const pageSize = 3;\n\n    const classes = useStyles();\n\n    const [pageNum, setPageNum] = useState(1);\n    const [temperatureType, setTemperatureType] = useState(TemperatureTypeEnum.FAHRENHEIT);\n    const [selectedWeatherCardKey, setSelectedWeatherCardKey] = useState();\n\n    useEffect(() => {\n        setSelectedWeatherCardKey(getWeatherItemsByPage()[0]?.key);\n    }, [pageNum]);\n\n    const getTemperature = temperature => {\n        const getCelsiusTemp = fahrenheitTemp => (fahrenheitTemp - 32) * (5 / 9);\n\n        if (temperatureType === TemperatureTypeEnum.CELSIUS) {\n            return getCelsiusTemp(temperature);\n        }\n        return temperature;\n    }\n\n    const handleChangePageNum = (direction) => {\n        const htmlWidth = document.getElementsByTagName('html')[0].offsetWidth;\n        const cardsWrapper = document.getElementById('cards-wrapper');\n\n        if (direction === 'right') {\n            setPageNum(pageNum + 1);\n            cardsWrapper.scrollLeft += htmlWidth;\n        } else {\n            setPageNum(pageNum - 1);\n            cardsWrapper.scrollLeft -= htmlWidth;\n        }\n    };\n\n    const handleChangeTemperatureType = (e) => {\n        setTemperatureType(e.target.value);\n    };\n\n    const renderTemperature = temperature => {\n        if (temperatureType === TemperatureTypeEnum.CELSIUS) {\n            return <span>{getTemperature(temperature).toFixed(2)}&#176;C</span>;\n        }\n        return <span>{getTemperature(temperature).toFixed(2)}&#176;F</span>;\n    };\n\n    const BlueRadio = withStyles({\n        root: {\n            color: blue[400],\n            '&$checked': {\n                color: blue[600],\n            },\n        },\n        checked: {},\n    })((props) => <Radio color=\"default\" {...props} />);\n\n    const WeatherCard = ({ date, averageTemp, isSelected, isInView, onClick }) => {\n        return (\n            <div className='weather-card' data-testid={`${isInView ? 'visible-card' : 'hidden-card'}`}>\n                <Card className={isSelected ? classes.selectedCard : classes.root} variant='outlined' onClick={onClick}>\n                    <CardContent>\n                        <Typography variant=\"h6\">Temp:</Typography>\n                        <Typography variant=\"body2\">{renderTemperature(averageTemp)}</Typography>\n                        <Typography variant=\"h6\">Date:</Typography>\n                        <Typography variant=\"body2\">{date}</Typography>\n                    </CardContent>\n                </Card>\n            </div>\n        );\n    };\n\n    const selectedWeatherCard = getWeatherItemsByPage().find(x => x.key === selectedWeatherCardKey);\n    const weatherCardSegments = selectedWeatherCard?.segments?.map(x => ({\n        label: `${getTemperature(x.temperature).toFixed(2)}${temperatureType === TemperatureTypeEnum.FAHRENHEIT ? 'F' : 'C'}`,\n        temp: getTemperature(x.temperature),\n        segment: x.time\n    }));\n\n    const CustomTooltip = ({ active, payload, label }) => {\n        if (active && payload && payload.length) {\n            return (\n                <div className=\"custom-tooltip\">\n                    <p className=\"label\">{payload[0].payload.segment}</p>\n                    <p className=\"label\">{`${payload[0].dataKey} : ${label}`}</p>\n                </div>\n            );\n        }\n\n        return null;\n    };\n\n    const itemsInView = getWeatherItemsByPage();\n\n    return (\n        <div className='weather-info-page'>\n            <div>\n                <RadioGroup row aria-label=\"temperature\" name=\"temperature\" value={temperatureType} onChange={handleChangeTemperatureType}>\n                    <FormControlLabel value={TemperatureTypeEnum.CELSIUS} control={<BlueRadio />} label=\"Celsius\" />\n                    <FormControlLabel value={TemperatureTypeEnum.FAHRENHEIT} control={<BlueRadio />} label=\"Fahrenheit\" />\n                </RadioGroup>\n            </div>\n            <div>\n                {\n                    pageNum > 1 &&\n                    <ArrowRightAltIcon\n                        style={{\n                            color: blue[500],\n                            fontSize: 100,\n                            transform: 'rotate(180deg)'\n                        }}\n                        onClick={() => handleChangePageNum('left')}\n                    />\n                }\n                {\n                    pageNum < (weatherItems.length / pageSize) &&\n                    <ArrowRightAltIcon\n                        style={{\n                            color: blue[500],\n                            fontSize: 100\n                        }}\n                        data-testid=\"next-icon\"\n                        onClick={() => handleChangePageNum('right')}\n                    />\n                }\n            </div>\n            <div>\n                <div>\n                    <div id=\"cards-wrapper\" data-testid=\"cards-wrapper\">\n                        {weatherItems.map((item) => (\n                            <WeatherCard\n                                {...item}\n                                isInView={itemsInView.some(x => x.key === item.key)}\n                                isSelected={selectedWeatherCardKey === item.key}\n                                onClick={() => setSelectedWeatherCardKey(item.key)}\n                            />\n                        ))}\n                    </div>\n                </div>\n            </div>\n            <div>\n                <BarChart width={730} height={250} data={weatherCardSegments}>\n                    <XAxis dataKey=\"label\" />\n                    <Tooltip content={<CustomTooltip />} />\n                    <Bar dataKey=\"temp\" fill=\"#8884d8\" />\n                </BarChart>\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    weatherItems: selectWeatherItems(state)\n});\n\nexport default connect(mapStateToProps, {})(WeatherInfo);\n"],"sourceRoot":""}